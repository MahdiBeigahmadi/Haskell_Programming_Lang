
1. (20 points) Given an Int n (n ≥ 0), write a recursive function called fib that computes the n-th Fibonacci
number. The n-th Fibonacci number is defined as:
f ib(n) =



0, n = 0
1, n = 1
f ib(n − 1) + f ib(n − 2), otherwise
Sample input and output:
ghci> fib 10
55
ghci> fib 20
6765
2. (20 points) Given a list L, write a recursive function called listReverse that reverses the list L.
Sample input and output:
ghci> listReverse [1, 2, 3]
[3,2,1]
ghci> listReverse "abc"
"cba"
3. (20 points) Given two lists of Int’s, write a recursive function called listAdd that computes their sum.
Specifically, the sum of two lists [x0, . . . , xn] and [y0, . . . , ym] is a list [z0, . . . , zk] where k = max{m, n} and
zi =
(
xi + yi
, for 0 ≤ i ≤ min{m, n}
xi or yi(whichever exists), for min{m, n} < i ≤ k
Sample input and output:
ghci> listAdd [1, 2] [3, 4]
[4,6]
ghci> listAdd [1, 2, 3] [4, 5]
[5,7,3]
ghci> listAdd [1, 2] [3, 4, 5]
[4,6,5]
1
4. (20 points) Given a list L of values and a value V , write a recursive function called inList that checks if
V occurs in the list L.
Sample input and output:
ghci> inList [1, 2, 3] 2
True
ghci> inList "abc" 'b'
True
5. (20 points) Write a tail-recursive function sumTailRec that takes a list of numbers and returns their sum.
Sample input and output:
ghci> sumTailRec [1..10]
55
ghci> sumTailRec [1, 2.1]
3.1
